/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Brain.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rocky <marvin@42.fr>                       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/26 15:30:54 by rocky             #+#    #+#             */
/*   Updated: 2024/08/26 17:31:01 by rocky            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../inc/Utils.hpp"
#include "../inc/Brain.hpp"

// ************************************************************************** //
//             Orthodox Canonical Constructors & Desctructors                 //
// ************************************************************************** //
Brain::Brain(void) {
    printStr("Brain created! :D", "Y");
}

Brain::Brain(const Brain & other) {
    printStr("Brain copied! :D", "Y");
    *this = other;
}

Brain::~Brain(void) {
    printStr("Brain destroyed! D:", "Y");
}

// ************************************************************************** //
//                           Operator Overloads                               //
// ************************************************************************** //
Brain & Brain::operator = (const Brain & other) {
    if (this != &other)
        *this= other;
    return *this;
}

// ************************************************************************** //
//                               Accessors                                    //
// ************************************************************************** //
const std::string&  Brain::getIdea(int index) const {
    return this->_ideas[index];
}

void                Brain::setIdea(std::string idea, int index) {
    this->_ideas[index] = idea;
}

// ************************************************************************** //
//                             Public Functions                               //
// ************************************************************************** //

// ************************************************************************** //
//                             Private Functions                              //
// ************************************************************************** //

// ************************************************************************** //
//                            Non-member Functions                            //
// ************************************************************************** //
